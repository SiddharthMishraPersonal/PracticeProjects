<?xml version="1.0" encoding="windows-1250" ?>
<?xml-stylesheet type="text/xsl" href="style.xsl" ?>
<content lang="en" id="documentation" subid="tutorial">
    <h1>Introduction to NLog</h1>

    <h3>Basic concepts</h3>
    <p>NLog is a log routing engine. It processes log messages that are output by the components of your program,
        formats them according to your preference, filters them according to their level, source and content
        and outputs them to one or more place based on a set of rules.</p>
    <h5>Loggers and LogManager</h5>
    <p>
        To write a log message in your code you use an instance of a <code>Logger</code> which you acquire from
        a <code>LogManager</code>. You can think of loggers as of log sources and targets as log sinks. Typically
        there's one source for each class named after its full name including namespace, e.g. 
        <code>MyCompany.MyProject.NameSpace.ClassName</code> but you may invent your own naming schema as well.
    </p>
    <h5>Log levels</h5>
    <p>
        Each message that you output has a level which describes its importance. 
        There are 6 predefined logging levels. They are: <code>Trace, Debug, Info, Warn, Error, Fatal</code>. Unlike other logging frameworks
        NLog <b>does NOT</b> support introducing more logging levels, but I believe that in this case "<i>less is more</i>".
    </p>
    <p>
        The following table describes the allowed logging levels along with their recommended usage.
    </p>
    <div class="table">
        <table>
            <col width="10%" />
            <col width="90%" />
            <tr>
                <th>Log Level</th>
                <th>Meaning</th>
            </tr>
            <tr>
                <td>Trace</td>
                <td>Messages useful to programmer only, not normally enabled, even by the support team. This level can include high-volume messages like the dump of entire datasets, XML documents, detailed parameter information, etc.</td>
            </tr>
            <tr>
                <td>Debug</td>
                <td>Messages useful for debugging, not normally enabled. This level can include high-traffic messages like the ones you write at each method call.</td>
            </tr>
            <tr>
                <td>Info</td>
                <td>Normal informational messages. Typically low traffic information - like "user logged on", "user authenticated".</td>
            </tr>
            <tr>
                <td>Warn</td>
                <td>Warning messages.</td>
            </tr>
            <tr>
                <td>Error</td>
                <td>Error messages.</td>
            </tr>
            <tr>
                <td>Fatal</td>
                <td>Fatal error messages. You usually write just one such message - just before the application terminates.</td>
            </tr>
        </table>
    </div>

    <h5>Log routing table</h5>
    <p>
        A <i>routing table</i> is used to manage the log rules. It can be accessed either programmatically
        or as an XML document either standalone or embedded in the application configuration file <code>App.config</code>.
    </p>
    <code lang="xml" src="examples/web/config6.nlog" />
    <p>
        The routing table is made up of the following main parts:
    </p>
    <ul>
        <li><b>targets</b> (previously called "appenders") - which specify where log output will go</li>
        <li><b>rules</b> - which describe the way log messages are routed to reach targets</li>
    </ul>
    <p>
        Each <x><rule/></x> definition consists of a logger name pattern, level specification and target information. The meaning
        is very simple: "<i>Each time a logger name matches the pattern and level matches the level specification, write the formatted 
            log message to the specified target</i>".
    </p>
    <p>
        As you can see the routing table is quite clean and simple, but very powerful. 
        Some examples of what you can use with it include:
    </p>
    <ul>
        <li>send single log message to one or more targets (for example: both to the console and a log file)</li>
        <li>filter logging messages by their level</li>
        <li>filter logging messages by their logger name using wildcards</li>
    </ul>
    <p>
        It's also possible to use filters and final rules, and this is described below in advanced section.
    </p>
    <h5>Layouts and layout renderers</h5>
    <p>
        Layouts are one of the coolest features of NLog. They let you annotate log messages with environmental information like:
    </p>
    <ul>
        <li>date and time in various formats</li>
        <li>stack trace information</li>
        <li>exception information</li>
        <li>classic ASP and ASP.NET session, request and application objects</li>
        <li>path information (such as appdomain base directory)</li>
        <li>log event information (logger name, log level)</li>
        <li>process and thread information</li>
        <li>machine name information</li>
        <li>diagnostic contexts</li>
        <li>counters, guids, and more</li>
    </ul>
    <p>
        Each target has a parameter called <code>layout</code> that describes the log output formatting. By default
        it is:
    </p>
    <p>
        <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
    </p>
    <p>
        so that each log line contains the data, log level, logger name and log message. This can be extended, for example,
        to provide some particular value from ASP.NET session state, thread id and call site (class and name of the 
        invoking method):
    </p>
    <p>
        <code>${longdate} ${level:uppercase=true} ${logger} ${aspnet-session:variable=UserName} ${threadid} ${callsite} ${message}</code>
    </p>
    <p>
        Now, each logging message (a line in the output file) will contain all of the above useful information. Example of a real-life configuration that does just that and writes output to both a file and ASP.NET trace facility. Note how the file output is more detailed than ASP.NET trace output:
    </p>
    <code lang="xml" src="examples/web/config11.nlog" />
    <p>
        It's even possible to write each log message to a different file based on environmental properties.
        For example, to write to a new file each day separated by the log level, just change <code>filename=""</code> to:
    </p>
    <p>
        <code>filename="${basedir}/../logs/${date:format=yyyy-MM-dd}_${level}_log.txt"</code>
    </p>
    <p>
        The resulting files will be named:
    </p>
    <ol>
        <li><code>../logs/2005-05-29_Debug_log.txt</code></li>
        <li><code>../logs/2005-05-29_Info_log.txt</code></li>
        <li><code>../logs/2005-05-29_Warn_log.txt</code></li>
        <li><code>../logs/2005-05-29_Error_log.txt</code></li>
        <li><code>../logs/2005-05-29_Fatal_log.txt</code></li>
        <li><code>../logs/2005-05-30_Debug_log.txt</code></li>
        <li><code>../logs/2005-05-30_Info_log.txt</code></li>
        <li><code>../logs/2005-05-30_Warn_log.txt</code></li>
        <li><code>../logs/2005-05-30_Error_log.txt</code></li>
        <li><code>../logs/2005-05-30_Fatal_log.txt</code></li>
        <li>...</li>
    </ol>
    <p>You can probably see that the possibilities are endless. See the <link href="layoutrenderers">Layout Renderers</link> for more information.</p>
    <h5>Logger usage</h5>
    <p>Usage is simple. Just get an instance of a <code>Logger</code> from the <code>LogManager</code> and 
        write your messages to it like you do with <code>Console.WriteLine()</code>. To write a message at a particular
        level use a method that's named after the level.</p>
    <p>The following code example shows what's available:</p>

    <code lang="C#" src="examples/web/tutorial.cs" />

    <h3>Advanced concepts</h3>
    <h5>Internal logging</h5>
    <p>
        There are cases where you need to debug your logging configuration. This is usually the case where you don't 
        get the expected log output. NLog provides a feature called internal logging. Internal logging
        lets you write NLog-internal debugging messages to the console and/or a log file optionally specifying the
        log level verbosity. Additionally you may want to tell NLog to throw exceptions on any error. This can
        help you detect and fix configuration errors (mostly permission problems) easily.
    </p>
    <p>
        The following options can be used in the configuration file to enable internal debugging:
    </p>
    <p>
        <x><nlog internalLogToConsole="true | false" /></x><br/>
        <x><nlog internalLogFile="filename" /></x><br/>
        <x><nlog internalLogLevel="Trace | Debug | Info | Warn | Error | Fatal" /></x><br/>
        <x><nlog throwExceptions="true | false" /></x><br/>
    </p>
    <p>
        More information about internal logging can be found in the <link href="howto_troubleshoot">troubleshooting</link> section and in the <link href="config">configuration</link> section.
    </p>
    <h5>Include files</h5>
    <p>
        If you have many applications you may want to share their logging configurations. NLog provides <x><include /></x>
        mechanism for that. TODO - write more.
    </p>
    <h5>Automatic config-file watching</h5>
    <p>
        There are cases where you need to modify the logging configuration at application runtime. Having to restart
        your application in this case should be avoided especially on production servers.
        NLog provides a convenient configuration attribute for this. 
        Just put the following in the configuration file:
    </p>
    <code lang="xml" src="examples/web/config12.nlog" />
    <h5>Filters</h5>
    <p>See the <link href="filters">Filter Reference</link> for more information. Tutorial will be added here soon.</p>
    <h5>Final rules</h5>
    <p>By default all NLog rules are additive, that is their effects add up. The rules are processed top-down 
        from the first rule to the last one. Sometimes you want to quit rule processing. That's what the <code>final</code> attribute
        is used for. [TODO - more to be written].
    </p>
    <!--
    <h5>Log processing detailed</h5>
    <p>The following picture describes log processing. </p>
    <img style="border: 1px solid #ffe0e0" src="nlog_routing.png" />
    <p/>
    -->
</content>
