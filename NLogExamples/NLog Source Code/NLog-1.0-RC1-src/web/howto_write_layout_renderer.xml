<?xml version="1.0" encoding="windows-1250" ?>
<?xml-stylesheet type="text/xsl" href="style.xsl" ?>
<content lang="en" id="documentation" subid="howto">
    <h1>How to write your own Layout Renderer</h1>

    <h5>Why would I want to write a Layout Renderer?</h5>

    <p>Layout renderers are a way to enrich your debugging output by outputting 
        environmental properties of your applications. NLog comes with Layout Renderers for most common tasks (like
        outputting environment variables, registry keys, thread ids, base directory, etc.), 
        but you may want to develop your own Layout Renderer to provide information about your
        application or framework.
    </p>

    <h5>How to write a layout renderer?</h5>
    <p>
        It's really easy. Create a class that inherits from <code>NLog.LayoutRenderer</code> 
        and override the <code>Append()</code> method. In the body of the method use the
        <code>ApplyPadding()</code> to get the output text formatted according to the
        common Layout Renderer parameters then send the text to the destination <code>StringBuilder</code>.
    </p>

    <h5>Example</h5>
    <p>This is a skeleton layout renderer that outputs current hour. Compile using:</p>
    <p>
        <code>csc.exe /t:library /out:MyAssembly.dll /r:NLog.dll MyFirstLayoutRenderer.cs</code>
    </p>

    <code lang="C#" src="examples/web/MyFirstLayoutRenderer.cs" />

<h5>How to use the newly created layout renderer?</h5>
<p>
    It's easy. Just put the renderer in a DLL and reference it from the the config file using the <x><extensions /></x>
    clause as described <a href="config.html#extensions">here</a>.
</p> 

<h5>Configuration file example</h5>
<p>
    This example causes all messages written to the console to be prepended with current hour. Simple isn't it?
</p>

<code lang="XML" src="examples/web/config9.nlog" />

<h5>How to pass configuration options to the renderer?</h5>

<p>
Consider the above example. There's a property called "ShowMinutes" that does just that. 
Having a public property that sets the required configuration parameters is enough for NLog to use it. 
Parameters can be passed by separating them with colons. For example:
</p>

<code>${hour:showminutes=true}</code>

<p>sets the ShowMinutes property to True during configuration. To pass more parameters, just use more colons:</p>

<code>${layoutrenderername:par1=value1:par2=value2:par3=value3:...:parN=valueN}</code>
<p>
NLog takes care of the appropriate conversions necessary so that
you can use integer, string, datetime, boolean parameters.
</p>

<h5>Do I really need to create a separate DLL?</h5>

<p>
    Not really. You can use LayoutRendererFactory.AddLayoutRenderer() to register your layout renderer programmatically. 
    Just be sure to to it at the very beginning of your program before any log messages are written.
    It should be possible to reference your EXE using the <x><extensions /></x> clause.
</p>

<code lang="C#" src="examples/web/AddLayoutRenderer.cs" />
</content>

